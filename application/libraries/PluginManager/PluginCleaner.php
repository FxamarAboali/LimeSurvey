<?php

namespace LimeSurvey\PluginManager;

/**
 * Helper class used to clean up the list of installed plugins
 */
class PluginCleaner
{
    /** @var string[] list of messages generated by the last call to the 'clean' method */
    protected $messages = [];

    /** @var boolean indicates if flash messaged should be set for each generated message */
    protected $enableFlashMessages = false;

    /**
     * Uninstalls incompatible or missing plugins
     * @return int the amount of plugins uninstalled
     */
    public function clean()
    {
        $this->messages = [];
        $removedPluginsCount = 0;
        $plugins = \Plugin::model()->findAll(array('order' => 'name'));
        foreach ($plugins as $plugin) {
            // If plugin is missing or is not compatible, it will be uninstalled
            if (!$plugin->isCompatible()) {
                $plugin->delete();
                $removedPluginsCount++;
                if ($plugin->dirExists()) {
                    $message = sprintf(gT("Plugin '%s' was uninstalled because it is not compatible with your LimeSurvey version."), $plugin->name);
                } else {
                    $message = sprintf(gT("Plugin '%s' was uninstalled because it was missing."), $plugin->name);
                }
                $this->addMessage($message);
            }
        }
        return $removedPluginsCount;
    }

    /**
     * Enables or disables the triggering of flash messages
     * @param boolean $enabled  true to enable flash messages, false to disable them
     */
    public function setEnableFlashMessages($enabled)
    {
        $this->enableFlashMessages = $enabled;
    }

    /**
     * Returns the array of messages generated by the last call to the 'clean' method
     * @return string[]
     */
    public function getMessages()
    {
        return $this->messages;
    }

    /**
     * Adds a message to the array and sets the corresponding flash message if enabled
     * @param string $message
     */
    protected function addMessage($message)
    {
        $this->messages[] = $message;
        if ($this->enableFlashMessages) {
            \Yii::app()->setFlashMessage($message);
        }
    }
}